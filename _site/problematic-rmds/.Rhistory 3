library(microdatasus)
install.packages(microdatasus)
install.packages("microdatasus")
install.packages("remotes")
remotes::install_github("rfsaldanha/microdatasus")
library(microdatasus)
library(dplyr)
library(tidyverse)
library(maditr)
library(ape)
mt_brazilian <- read.GenBank(c(
"AF243627", # Amerindian/Asian lineage
"AF243628", # Amerindian/Asian lineage
"AF243629", # Amerindian/Asian lineage
# "AF243630", # Amerindian/Asian lineage
# "AF243631", # Amerindian/Asian lineage
# "AF243632", # Amerindian/Asian lineage
# "AF243633", # Amerindian/Asian lineage
"AF243634", # African lineage
"AF243635", # African lineage
"AF243636", # African lineage
"AF243637", # African lineage
"AF243638", # African lineage
"AF243639", # African lineage
"AF243640",  # African lineage
"AF243700", # Amerindian/Asian lineage
# "AF243701", # Amerindian/Asian lineage
# "AF243702", # Amerindian/Asian lineage
# "AF243703", # Amerindian/Asian lineage
# "AF243704", # Amerindian/Asian lineage
# "AF243705", # Amerindian/Asian lineage
# "AF243706", # Amerindian/Asian lineage
# "AF243707", # Amerindian/Asian lineage
# "AF243708", # Amerindian/Asian lineage
# "AF243709", # Amerindian/Asian lineage
# "AF243780", # European lineage
# "AF243781", # European lineage
# "AF243782", # European lineage
# "AF243783", # European lineage
# "AF243784", # European lineage
# "AF243785", # European lineage
#
# "AF243786", # European lineage
# "AF243787", # European lineage
# "AF243788", # European lineage
# "AF243789", # European lineage
# "AF243790", # European lineage
"AF243791", # European lineage
"AF243792", # European lineage
"AF243793", # European lineage
"AF243794", # European lineage
"AF243795", # European lineage
"AF243796"  # European lineage
))
write.dna(mt_brazilian,
file = "./data/mt_prs.fasta",
format = "fasta")
mt_extracted <- read.table("data/file3.txt")
mt_extracted <- read.table("data/file3.txt", sep = "\t", header = T)
names(mt_extracted)[1]<-paste("sample")
names(mt_extracted)[2]<-paste("chr")
names(mt_extracted)[3]<-paste("pos")
names(mt_extracted)[4]<-paste("genotype")
dim(mt_extracted)
View(mt_extracted)
mt_genotypes_extracted <- read.table("data/mt_genotypes_extracted.txt")
names(mt_genotypes_extracted)[1]<-paste("pos")
names(mt_genotypes_extracted)[2]<-paste("sample")
names(mt_genotypes_extracted)[3]<-paste("genotype")
dim(mt_genotypes_extracted)
View(mt_genotypes_extracted)
mt_genotypes_appended <- read.table("data/test_mt_appended_2.txt")
names(mt_genotypes_appended)[1]<-paste("pos")
names(mt_genotypes_appended)[2]<-paste("sample")
names(mt_genotypes_appended)[3]<-paste("genotype")
dim(mt_genotypes_appended)
View(mt_genotypes_appended)
mt_selected <- mt_extracted %>% dplyr::select(sample, pos, genotype)
library(maditr)
mt_selected <- mt_extracted %>% dplyr::select(sample, pos, genotype)
library(reshape2)
mt_dcast <- dcast(mt_selected, sample ~ pos)
View(mt_dcast)
install.packages("InformationValue")
install.packages(InformationValue)
devtools::install(InformationValue)
devtools::install("InformationValue")
library(expss)
library(dplyr)
library(kableExtra)
library(ggplot2)
library(caret)
library(pROC)
mt_features_df <- read.table("./data/mt_dcast_appended_binary.txt", header = T)
dim(mt_features_df)
View(mt_features_df)
mt_genotypes_appended <- read.table("data/test_mt_appended_2.txt")
names(mt_genotypes_appended)[1]<-paste("pos")
names(mt_genotypes_appended)[2]<-paste("sample")
names(mt_genotypes_appended)[3]<-paste("genotype")
dim(mt_genotypes_appended)
library(maditr)
mt_selected <- mt_extracted %>% dplyr::select(sample, pos, genotype)
library(reshape2)
mt_dcast <- dcast(mt_selected, sample ~ pos)
library(reshape2)
mt_selected_genotypes_extracted <- mt_genotypes_extracted %>% dplyr::select(sample, pos, genotype)
mt_dcast_genotypes_extracted <- dcast(mt_selected_genotypes_extracted, sample ~ pos)
library(reshape2)
mt_selected_appended <- mt_genotypes_appended %>% dplyr::select(sample, pos, genotype)
mt_dcast_appended <- dcast(mt_selected_appended, sample ~ pos)
# Split Each Sample
split_df <- str_split_fixed(mt_dcast_appended$sample, "_", 2)
library(maditr)
library(kableExtra)
library(dplyr)
library(stringr)
library(tibble)
library(reshape2)
mt_selected_appended <- mt_genotypes_appended %>% dplyr::select(sample, pos, genotype)
mt_dcast_appended <- dcast(mt_selected_appended, sample ~ pos)
# Split Each Sample
split_df <- str_split_fixed(mt_dcast_appended$sample, "_", 2)
# Construct Vector Maintaining parts of interest
split_vector <- paste0(split_df[,1])
# Add vector to DF, after column of interest
mt_dcast_appended <- add_column(mt_dcast_appended, fastaID = split_vector, .after = "sample")
mt_dcast_appended <- mt_dcast_appended %>% dplyr::select(-c(sample))
library(data.table)
dt1         <- data.table(mt_dcast , key = "sample")
dt2         <- data.table(sampleIDs, key = "sampleName")
sampleIDs <- read.table("data/sampleIDs.txt")
names(sampleIDs)[1]<-paste("GenBankID")
names(sampleIDs)[2]<-paste("sampleName")
metadataIDs <- read.table("data/metadataIDs.txt")
names(metadataIDs)[1]<-paste("GenBankID")
names(metadataIDs)[2]<-paste("sampleName")
names(metadataIDs)[3]<-paste("origin")
mt_extracted <- read.table("data/file3.txt", sep = "\t", header = T)
names(mt_extracted)[1]<-paste("sample")
names(mt_extracted)[2]<-paste("chr")
names(mt_extracted)[3]<-paste("pos")
names(mt_extracted)[4]<-paste("genotype")
dim(mt_extracted)
mt_genotypes_extracted <- read.table("data/mt_genotypes_extracted.txt")
names(mt_genotypes_extracted)[1]<-paste("pos")
names(mt_genotypes_extracted)[2]<-paste("sample")
names(mt_genotypes_extracted)[3]<-paste("genotype")
dim(mt_genotypes_extracted)
mt_genotypes_appended <- read.table("data/test_mt_appended_2.txt")
names(mt_genotypes_appended)[1]<-paste("pos")
names(mt_genotypes_appended)[2]<-paste("sample")
names(mt_genotypes_appended)[3]<-paste("genotype")
dim(mt_genotypes_appended)
library(maditr)
mt_selected <- mt_extracted %>% dplyr::select(sample, pos, genotype)
library(reshape2)
mt_dcast <- dcast(mt_selected, sample ~ pos)
library(reshape2)
mt_selected_genotypes_extracted <- mt_genotypes_extracted %>% dplyr::select(sample, pos, genotype)
mt_dcast_genotypes_extracted <- dcast(mt_selected_genotypes_extracted, sample ~ pos)
library(reshape2)
mt_selected_appended <- mt_genotypes_appended %>% dplyr::select(sample, pos, genotype)
mt_dcast_appended <- dcast(mt_selected_appended, sample ~ pos)
# Split Each Sample
split_df <- str_split_fixed(mt_dcast_appended$sample, "_", 2)
# Construct Vector Maintaining parts of interest
split_vector <- paste0(split_df[,1])
# Add vector to DF, after column of interest
mt_dcast_appended <- add_column(mt_dcast_appended, fastaID = split_vector, .after = "sample")
mt_dcast_appended <- mt_dcast_appended %>% dplyr::select(-c(sample))
library(data.table)
dt1         <- data.table(mt_dcast , key = "sample")
dt2         <- data.table(sampleIDs, key = "sampleName")
joined_df_1 <- dt1[dt2]
mt_dcast    <- joined_df_1
mt_dcast <- mt_dcast %>% dplyr::relocate(GenBankID, .before = sample)
mt_dcast <- mt_dcast %>% dplyr::select(-c(sample))
library(data.table)
dt1               <- data.table(mt_dcast_appended , key = "fastaID")
dt2               <- data.table(metadataIDs, key = "GenBankID")
joined_df_1       <- dt1[dt2]
mt_dcast_appended <- joined_df_1
mt_dcast_appended <- mt_dcast_appended %>% dplyr::relocate(sampleName, .after = fastaID)
mt_dcast_appended <- mt_dcast_appended %>% dplyr::relocate(origin, .after = sampleName)
mt_dcast_appended <- mt_dcast_appended %>% dplyr::select(-c(sampleName))
colnames(mt_dcast) <- paste("MT", colnames(mt_dcast), "BP", sep= "_")
names(mt_dcast)[1]<-paste("GenBankID")
mt_dcast <- mt_dcast %>% dplyr::select(-c(MT_sample_BP))
names(mt_dcast)[1]<-paste("GenBankID")
mt_dcast <- mt_dcast %>% dplyr::mutate(origin = ifelse(row_number() < 10, "America", "Africa" ))
mt_dcast <- mt_dcast %>% dplyr::relocate(origin, .after = GenBankID)
library(expss)
library(readr)
adult <- read_csv("./data/adult.csv")
library(readr)
adult <- read_csv("../data/adult.csv")
# Checking the structure of adult data
dim(adult)
# Subsetting the data and keeping the required variables
adult <- adult[ ,c("workclass", "marital.status", "age", "income")]
names(adult)[names(adult) == 'income'] <- 'Class'
# Checking the dim
dim(adult)
table(adult$workclass)
# Combining levels
adult$workclass[adult$workclass == "Without-pay" | adult$workclass == "Never-worked"] <- "Unemployed"
adult$workclass[adult$workclass == "State-gov" | adult$workclass == "Local-gov"] <- "SL-gov"
adult$workclass[adult$workclass == "Self-emp-inc" | adult$workclass == "Self-emp-not-inc"] <- "Self-employed"
# Checking the table again
table(adult$workclass)
# Generating the frequency table
table(adult$marital.status)
# Combining levels
adult$marital.status[adult$marital.status == "Married-AF-spouse" | adult$marital.status == "Married-civ-spouse" | adult$marital.status == "Married-spouse-absent"] <- "Married"
adult$marital.status[adult$marital.status == "Divorced" |
adult$marital.status == "Separated" |
adult$marital.status == "Widowed"] <- "Not-Married"
# Checking the table again
table(adult$marital.status)
# Converting to factor variables
adult$workclass <- as.factor(adult$workclass)
adult$marital.status <- as.factor(adult$marital.status)
adult$Class <- as.factor(adult$Class)
# Converting ? to NA
adult[adult == "?"] <- NA
# Keeping only the na.omit() function
adult <- na.omit(adult)
library(ggplot2)
ggplot(adult, aes(age)) +
geom_histogram(aes(fill = Class), color = "black", binwidth = 2)
# Loading caret library
require(caret)
# Splitting the data into train and test
index <- createDataPartition(adult$Class, p = .70, list = FALSE)
train <- adult[index, ]
train
cross_cases(train, Class)
test <- adult[-index, ]
test
# Training the model
logistic_model <- glm(Class ~ ., family = binomial(), train)
# Checking the model
summary(logistic_model)
Sigmoid function, p = exp(-0.591532)/(1+exp(-0.591532))
# Predicting in the test dataset
pred_prob <- predict(logistic_model, test, type = "response")
pred_prob
# Converting from probability to actual output
train$pred_class <- ifelse(logistic_model$fitted.values >= 0.5, ">50K", "<=50K")
# Generating the classification table
ctab_train <- table(train$Class, train$pred_class)
ctab_train
# Converting from probability to actual output
test$pred_class <- ifelse(pred_prob >= 0.5, ">50K", "<=50K")
# Generating the classification table
ctab_test <- table(test$Class, test$pred_class)
ctab_test
## Accuracy = (TP + TN)/(TN + FP + FN + TP)
# Accuracy in Training dataset
accuracy_train <- sum(diag(ctab_train))/sum(ctab_train)*100
accuracy_train
# Accuracy in Test dataset
accuracy_test <- sum(diag(ctab_test))/sum(ctab_test)*100
accuracy_test
library(expss)
library(readr)
adult <- read_csv("../data/adult.csv")
# Checking the structure of adult data
dim(adult)
# Subsetting the data and keeping the required variables
adult <- adult[ ,c("workclass", "marital.status", "age", "income")]
names(adult)[names(adult) == 'income'] <- 'Class'
# Checking the dim
dim(adult)
table(adult$workclass)
# Combining levels
adult$workclass[adult$workclass == "Without-pay" | adult$workclass == "Never-worked"] <- "Unemployed"
adult$workclass[adult$workclass == "State-gov" | adult$workclass == "Local-gov"] <- "SL-gov"
adult$workclass[adult$workclass == "Self-emp-inc" | adult$workclass == "Self-emp-not-inc"] <- "Self-employed"
# Checking the table again
table(adult$workclass)
# Generating the frequency table
table(adult$marital.status)
# Combining levels
adult$marital.status[adult$marital.status == "Married-AF-spouse" | adult$marital.status == "Married-civ-spouse" | adult$marital.status == "Married-spouse-absent"] <- "Married"
adult$marital.status[adult$marital.status == "Divorced" |
adult$marital.status == "Separated" |
adult$marital.status == "Widowed"] <- "Not-Married"
# Checking the table again
table(adult$marital.status)
# Converting to factor variables
adult$workclass <- as.factor(adult$workclass)
adult$marital.status <- as.factor(adult$marital.status)
adult$Class <- as.factor(adult$Class)
# Converting to factor variables
adult$workclass <- as.factor(adult$workclass)
adult$marital.status <- as.factor(adult$marital.status)
adult$Class <- as.factor(adult$Class)
# Converting ? to NA
adult[adult == "?"] <- NA
# Keeping only the na.omit() function
adult <- na.omit(adult)
library(ggplot2)
ggplot(adult, aes(age)) +
geom_histogram(aes(fill = Class), color = "black", binwidth = 2)
View(adult)
# Loading caret library
require(caret)
# Splitting the data into train and test
index <- createDataPartition(adult$Class, p = .70, list = FALSE)
train <- adult[index, ]
train
cross_cases(train, Class)
test <- adult[-index, ]
test
# Training the model
logistic_model <- glm(Class ~ ., family = binomial(), train)
# Checking the model
summary(logistic_model)
# Predicting in the test dataset
pred_prob <- predict(logistic_model, test, type = "response")
pred_prob
# Converting from probability to actual output
train$pred_class <- ifelse(logistic_model$fitted.values >= 0.5, ">50K", "<=50K")
# Generating the classification table
ctab_train <- table(train$Class, train$pred_class)
ctab_train
# Converting from probability to actual output
test$pred_class <- ifelse(pred_prob >= 0.5, ">50K", "<=50K")
# Generating the classification table
ctab_test <- table(test$Class, test$pred_class)
ctab_test
## Accuracy = (TP + TN)/(TN + FP + FN + TP)
# Accuracy in Training dataset
accuracy_train <- sum(diag(ctab_train))/sum(ctab_train)*100
accuracy_train
ctab_train
View(ctab_train)
